x <- matrix(1:9,nrow =3 , ncol =3 ,byrow =F)
x
TRUE
m1 = matrix(c(1:27),nrow = 3)
dim(m1)
m1
# vector vs matrix
x <- 1:3
y <- matrix(rep(1,6),nrow=2,byrow=FALSE)
y
dim(y)
z <- x*y
z
z <- y*x
z
# apply() : 처리
apply(z,2,sum) # 1 행단위 2 열단위
arr <- array(1:12,c(3,2,2))
arr
arr[,,1]
lst2<- list('a'=c(1,'2',3),"이순신",34)
lst2
lst2$a[1]
lst2<- list('a'=c(1,2,3),"이순신",34)
lst2
lst2$a[1]
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c(12,13))
member$name[1]
a = data.frame(member)
x <-10
y <-5
z <- x * y
z
if(z >=50 ){
cat ("z=",50,"이상입니다")
}
z
if(z >=50 ){
cat (z,"=50,이상입니다")
}
if(z >=50 ){
cat (z,"=50이상입니다")
}
else{
cat (z,"=50미만입니다")
}
score <- scan() #키보드입력
if(score >=50 ){
cat (score,"=50이상입니다")
}else{
cat (score,"=50미만입니다")
}
z <- x * y
z
if(z >=50 ){
cat (z,"=50이상입니다")
}else{
cat (z,"=50미만입니다")
}
z
if(z >=50 ){
cat (z,"=50이상입니다")
}
z
if(z >=50 ){
cat (z,"=50이상입니다")
}else{
cat (z,"=50미만입니다")
}
score <- scan() #키보드입력
cat (score,"=50이상입니다")
}else{
cat (score,"=50미만입니다")
}
grade <- ""
if(score >=90)
grade <-"A"
else if(score >=80)
grade <-"B"
else
grade <-'D'
print(grade)
grade <- ""
if(score >=90){
grade <-"A"
}else if(score >=80){
grade <-"B"
}else{
grade <-'D'
}
print(grade)
z
if(z >=50 ){
cat (z,"=50이상입니다")
}else{
cat (z,"=50미만입니다")
}
z
if(z >=50 )
cat (z,"=50이상입니다")
else
cat (z,"=50미만입니다")
a <-3
ifelse(a==3,print("3"),print("not 3"))
a <- 2
ifelse(a==3,print("3"),print("not 3"))
score <- c(70,30,40,50)
ifelse(score>70 ,"합","불합")
score <- c(70,30,40,50)
result <- ifelse(score>70 ,"합","불합")
result
score <- c(70,90,40,50)
result <- ifelse(score>70 ,"합","불합")
result
score <- c(70,90,NA,40,50)
result <- ifelse(score>70 ,"합","불합")
result
reuslt2 <- ifelse(is.na(result),"결측",result)
result2
result2 <- ifelse(is.na(result),"결측",result)
result2
result2 <- ifelse(is.na(result),0,result)
result2
result2 <- ifelse(is.na(score),0,score)
result2
sum(result)
sum(result)
sum(result2)
mean(result2)
mean(score,na.rm = T)
which(x,7)
which(x,useNames = 7)
which(x,useNames = "7")
which(x==7)
# which() 조건에 해당하는위치() index 반환
x <- seq(1,10,3)
x # 1 4 7 10
which(x==7)
emp <- read.csv("c:/Rwork/data/emp,csv")
emp <- read.csv("c:/Rwork/data/emp.csv")
emp
which(emp$name == "유관순")
emp$name[1]
emp$name[1] ="유관순"
emp
which(emp$name == "유관순")
mode(which(emp$name == "유관순"))
class(which(emp$name == "유관순"))
str(which(emp$name == "유관순"))
emp[1]
emp[1][2]
emp[1,2]
index <- which(emp$name == "유관순")
index
emp_sub <- emp[idx,]
emp_sub <- emp[idex,]
emp_sub <- emp[index,]
emp_sub
library("MASS")
data("Boston")
str(Boston)
# medv 종속변수
# 1~13 독립변수
names(Boston)
# medv 종속변수
# 1~13 독립변수
cols <- names(Boston)
idx <- which(cols=="medv")
idx
y <- Boston[,idx]
y <- Boston[,idx]
x <- Boston[,-idx]
plot(x,y)
plot(x[1],y)
x
x[1]
plot(x[1],y)
plot(x$crim,y)
# 단계1) client의 price 칼럼값이 70만원 이상인 고객은 "Best"
# 70만원 미만이면 "Normal" 문자열로 분류하여 client에 새로운 컬럼(result)으로 추가하기
result <- ifelse(client$price >=70,"Best","Normal")
# vector 준비
name <-c("유관순","홍길동","이순신","신사임당")
gender <- c("F","M","M","F")
price <-c(50,65,45,75)
client <- data.frame(name, gender, price)
# 단계1) client의 price 칼럼값이 70만원 이상인 고객은 "Best"
# 70만원 미만이면 "Normal" 문자열로 분류하여 client에 새로운 컬럼(result)으로 추가하기
result <- ifelse(client$price >=70,"Best","Normal")
result
client$result <- result
client
gender2 <- ifelse(client$gender == 'M',"Male","Female")
client$gender2 <- gender2
client
# 단계3) 새로 추가한 result 칼럼의 빈도수 구하기
# 힌트) 빈도수 구하기 : table() 함수 이용
table(result)
# 단계1) 시가(Open)와 종가(Close)의 차(diff) 구하기
# diff = Open - Close
gen <- c()
gen[1] = "1"
gen
# 단계3) 새로 추가한 result 칼럼의 빈도수 구하기
# 힌트) 빈도수 구하기 : table() 함수 이용
table(client$result)
"ss" && "sd"
12 && 11
12 & 11
12 && 11
# 단계2) 차(diff)를 칼럼으로 추가하기
0 && 10
# 단계2) 차(diff)를 칼럼으로 추가하기
0 & 10
x <- rnorm(n,mean=0,sd=1)
x <- rnorm(n=1000,mean=0,sd=1)
x <- rnorm(n=1000,mean=0,sd=1)
for(v in x){
print(v)
}
x <- rnorm(n=1000,mean=0,sd=1)
for(v in x){
cat("v=",v,"\n")
}
x <- rnorm(n=1000,mean=0,sd=1)
idx <- 1 # index
for(v in x){
cat("v=",v,"\n")
y[idx] <- v^2
idx <- idx + 1
}
y
plox(x,y)
plot(x,y)
st <- read.table("c://rwork/data/student.txt")
st
colnames(st) <- c("id","name","height","weight")
st
# if else for
height2 <- ifelse(st$height >= 180 , "high","low")
st$height2 <- height2
st
weight2 <- ifelse(st$weight >= 180 , "high","low")
st$weight2 <- weight2
st
weight2 <- ifelse(st$weight >= 50 , "high","low")
st$weight2 <- weight2
st
weight2 <- ifelse(st$weight >= 70 , "high","low")
st$weight2 <- weight2
st
# dataset 가져오기
kospi <- read.csv(file.choose()) # sam_kospi.csv
str(kospi)
# 단계1) 시가(Open)와 종가(Close)의 차(diff) 구하기
# diff = Open - Close
diff = kospi$Open - kospi$Close
# 단계2) 차(diff)를 칼럼으로 추가하기
kospi$diff = diff
# 단계3) 차(diff) 칼럼이 0보다 크면 '▲', 아니면 '▽'으로 분류하여 Status 칼럼으로 추가하기
Status <- ifelse(diff >0 ,'▲','▽')
kospi$Status <- Status
head(kospi)
x <- c(2,5,6,7)
y <- 0
i=0
while(i<count(x)){
y <- x[i]^2
i = i+1
}
i=0
while(i<length(x)){
y <- x[i]^2
i = i+1
}
y
i=1
while(i<length(x)){
y <- x[i]^2
i = i+1
}
y
i=1
while(i<length(x)){
y <- y + x[i]^2
i = i+1
}
y
user_fun1 <- function(){
cat("user_fuc")
}
user_fun1()
na <- function(data){
# 결측치 제거
mean(data,na.rm=T)
# 결측치  0
tmp1 <- iselese(is.na(data),0,data)
mean(tmp1)
# 결측치 평균
tmp2 <- ifelse(is.na(data),mean(data,na.rm=T),data)
mean(tmp2)
}
data <- c(2,10,NA,20)
function(dat)
function(data)
na <- function(data){
# 결측치 제거
print(mean(data,na.rm=T))
# 결측치  0
tmp1 <- iselese(is.na(data),0,data)
print(mean(tmp1))
# 결측치 평균
tmp2 <- ifelse(is.na(data),mean(data,na.rm=T),data)
print(mean(tmp2))
}
data <- c(2,10,NA,20)
function(data)
na(data)
data <- c(2,10,NA,20)
na(data)
na <- function(data){
# 결측치 제거
print(mean(data,na.rm=T))
# 결측치  0
tmp1 <- iseles(is.na(data),0,data)
print(mean(tmp1))
# 결측치 평균
tmp2 <- ifelse(is.na(data),mean(data,na.rm=T),data)
print(mean(tmp2))
}
data <- c(2,10,NA,20)
na(data)
na <- function(data){
# 결측치 제거
print(mean(data,na.rm=T))
# 결측치  0
tmp1 <- iselse(is.na(data),0,data)
print(mean(tmp1))
# 결측치 평균
tmp2 <- ifelse(is.na(data),mean(data,na.rm=T),data)
print(mean(tmp2))
}
data <- c(2,10,NA,20)
na(data)
na <- function(data){
# 결측치 제거
print(mean(data,na.rm=T))
# 결측치  0
tmp1 <- ifelse(is.na(data),0,data)
print(mean(tmp1))
# 결측치 평균
tmp2 <- ifelse(is.na(data),mean(data,na.rm=T),data)
print(mean(tmp2))
}
data <- c(2,10,NA,20)
na(data)
na <- function(data){
# 결측치 제거
print(mean(data,na.rm=T))
# 결측치  0
tmp1 <- ifelse(is.na(data),0,data)
print(mean(tmp1))
# 결측치 평균
tmp2 <- ifelse(is.na(data),mean(data,na.rm=T),data)
print(mean(tmp2))
}
library(stringr)
library(help="stringr")
str_extract(string,"[가-힣]{3}")
string <- "홍길동35 이순신45 유관순 25"
str_extract(string,"[가-힣]{3}")
name <- str_extract(string,"[가-힣]{3}")
name
name <- str_extract_all(string,"[가-힣]{3}")
name
names <- unlist(name) # list -> vector
names
str_replace_all("1,2$3)%", "\\$")
str_replace_all("1,2$3)%","\\$|\\,|\\)|\\%")
s = "1,2$3)%"
str_replace_all(s,"\\$|\\,|\\)|\\%")
str_replace_all()
str_replace_all(s,"\\$|\\,|\\)|\\%","")
as.numeric(str_replace_all(s,"\\$|\\,|\\)|\\%",""))
data_pro <- function(data){
library(stringr)
return (as.numeric(str_replace_all(data,"\\$|\\,|\\)|\\%","")))
}
data_pro("$14%2")
data_pro(c("$14%2"))
data_pro(c("$14%2","%3"))
stock
data(stock)
stock <- read.csv("c://dev/rwork/data/st.csv")
stock <- read.csv("c://dev/rwork/data/stock.csv")
stock <- read.csv("c://rwork/data/stock.csv")
stock
# subset : 1~15
stock_df <- stock[c(1:15)]
str(stock_df)
# 숫자 : 특수문자 제저
apply(stock_df[c(7:15)],2,data_pro)
# 숫자 : 특수문자 제저
stock_df[c(7:15)]
apply(stock_df[c(7:15)],1,data_pro)
stock_num <- apply(stock_df[c(7:15)],1,data_pro)
stock_num <- apply(stock_df[c(7:15)],2,data_pro)
new_stock <- cbind(stock_df[c(1:6)],stock_num)
head(new_stock)
data
# 1)기본 내장함수
data <- runif(20,min=0,max=100)
data
min(data)
range(data)
median(data)
sorted(data)
sortedXyData(data)
sort(data)
sort(data)[length(data)/2]
median(data)
sort(data)[10] + sort(data)[11] /2
(sort(data)[10] + sort(data)[11]) /2
# 1)기본 내장함수
data <- runif(21,min=0,max=100)
median(data)
sort(data)[length(data)/2]
(sort(data)[10] + sort(data)[11]) /2
sort(data)[10]
sort(data)[11]
summary(data)
summary(data)
data(iris)
str(iris)
sort(iris$Sepal.Length)
sort(iris$Sepal.Length,decreasing=T)
# colunm 단위
sort(iris$Sepal.Length)
order(iris$Sepal.Length)
# colunm 단위
sort(head(iris$Sepal.Length))
order(head(iris$Sepal.Length))
head(iris$Sepal.Length)
iris[idx,]
idx <- order(head(iris$Sepal.Length)) # index 반환
iris[idx,]
summary(iris)
# 로그 지수
log10(10) # 1 -> 10^1 = 10
# 자연 로그
log(10)
# 자연 로그
log(e)
# 자연 로그
log(exp)
# 자연 로그
log(exp())
# 자연 로그
log(exp(1))
log(10)
# 자연 로그
log(exp(2))
e^2
exp(2)
log(x)
exp(x)
log(x)
x <- c(0.12,1,12,99,999)
exp(x)
log(x)
hist(norm(1000,0,1))
hist(rnorm(1000,0,1))
r2 <- runif(n,min=0,max=1)
r2 <- runif(30,min=0,max=1)
hist(r2)
# 균등 분포
r2 <- runif(1000,min=0,max=1)
hist(r2)
rbinom(n,size=1,prob(0.5))
# 이항분포를 따르는 난수 생성
# rbinom(n,size,prob)
# size :sample size , prob : 확률
r3 <- rbinom(10,size=1,prob(0.5))
# 이항분포를 따르는 난수 생성
# rbinom(n,size,prob)
# size :sample size , prob : 확률
r3 <- rbinom(10,size=1,prob= 0.5)
r3
# 이항분포를 따르는 난수 생성
# rbinom(n,size,prob)
# size :sample size , prob : 확률
r3 <- rbinom(10,size=3,prob= 0.5)
r3
r4 <- rbinom(10,size=1,prob= 0.25)
r4
r5 <- rbinom(10,size=3,prob= 0.25)
r5
r5 <- rbinom(10,size=3,prob= 0.25,0.4)
# 종자값 (seed)
set.seed(123)
r <- rnorm(10)
r
r
# 종자값 (seed)
set.seed(123)
r <- rnorm(10)
r
# 종자값 (seed)
set.seed(124)
r <- rnorm(10)
r
