diff
diff <- (score - avg)^2
diff
sum(diff)/(length(score)-1)
lst1
# list 서로다른 자료형과 자료구조를 갖는 자료구조(1,2,3)이다
# key value 구조
lst1<- list('lee',"이순신",34)
lst1
# [[1]] -> key
# [1] lee->value
lst[1]
# [[1]] -> key
# [1] lee->value
lst1[1]
# [[1]] -> key
# [1] lee->value
lst1[[1]]
lst2<- list(a:'lee',"이순신",34)
lst2<- list('a'='lee',"이순신",34)
lst2
lst2$a
lst2<- list('a'='lee',"이순신",34,'a'="kim")
lst2
lst2$a
lst2$a
lst2
lst2<- list('a'=c(1,2,3),"이순신",34)
lst2
lst2$a
lst2$a[1]
# [[1]] -> key
# [1] lee->value
lst1[[[1]]]
# [[1]] -> key
# [1] lee->value
lst1[[1]]
lst1[1]
lst1[1][1]    # index를 가지고 key value
lst1[1][2]    # index를 가지고 key value
lst1[1]    # index를 가지고 key value
# [[1]] -> key
# [1] lee->value
lst1[[1]]  # key를 가지고 접근
lst1[1][1][1]   # index를 가지고 key value
lst1[1][1][2]   # index를 가지고 key value
lst1[1][1]  # index를 가지고 key value
lst1[1]  # index를 가지고 key value
lst1[1,1]  # index를 가지고 key value
lst1[1]  # index를 가지고 key value
install.packages(("stringr"))
library(stringr)
names <- str_extract_all(str,"[가-힣]{1}")
names
str <- "김 12 이 13 디 14"
names <- str_extract_all(str,"[가-힣]{1}")
names
names[1]
names
class(names)
names[[1]]
names[[1]][2]
names[[1]][1]
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c('12,13'))
member
data.frame(member)
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c('12','13'))
member
data.frame(member)
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c(12,13))
member
data.frame(member)
typeof(a)
mode(a)
clas(a)
class(a)
member['name']
member[name]
member$name
member$name[0]
member$name[1]
names$[1]
names$[[1]]
a$name
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c(12,13))
member$name[1]
a = data.frame(member)
class(a)
a$name
a = data.frame(member)
a
a$name
a$age
x <- rnorm(1000,165,1)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
# 2.평균차이 검정 : 평균 : 165.2cm
t.test(x,mu=165.2)
x <- rnorm(1000,mean=165,sd=1)
hist(x)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
# 2.평균차이 검정 : 평균 : 165.2cm
t.test(x,mu=165.2)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
# 2.평균차이 검정 : 평균 : 165.2cm
t.test(x,mu=165.2)
x <- rnorm(1000,mean=165,sd=1)
hist(x)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
# 2.평균차이 검정 : 평균 : 165.2cm
t.test(x,mu=165.2)
x <- rnorm(10000,mean=165,sd=1)
hist(x)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
x <- rnorm(5000,mean=165,sd=1)
hist(x)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
# 2.평균차이 검정 : 평균 : 165.2cm
t.test(x,mu=165.2)
x <- rnorm(5000,mean=165.2,sd=1)
hist(x)
# 정규성 검정
# 귀무가설 : 정규분포와 차이가없다.
shapiro.test(x)
# 2.평균차이 검정 : 평균 : 165.2cm
t.test(x,mu=165.2)
#----------------------------------------------------------------
# 3. 기각역의 평균검정
t.test(x,mu=165.09)
#----------------------------------------------------------------
# 3. 기각역의 평균검정
t.test(x,x)
mu=165.09
#----------------------------------------------------------------
# 3. 기각역의 평균검정
t.test(x,mu=165.09)
#----------------------------------------------------------------
# 4. 신뢰수준 변경
t.test(x,mu=165.2,conf.level = 0.99)
x <- rnorm(1000,mean=165.2,sd=1)
#----------------------------------------------------------------
# 4. 신뢰수준 변경
t.test(x,mu=165.2,conf.level = 0.99)
# 1 .표준화 : 정규분포 -> 표준 정규분포(0,1)
# 정규분포
n <- 2000
x <- rnorm(n,mean=100,sd=10)
shapiro.test(x)
z  <- (x - mean(x) )/ sd(x)
hist(z)
# scale() 함수 표준화 함수
scale(x) # matrix -> data.frame
# scale() 함수 표준화 함수
as.data.frame(scale(x)) # matrix -> data.frame
# scale() 함수 표준화 함수
z2 <- as.data.frame(scale(x)) # matrix -> data.frame
str(z2)
hist(z2)
# scale() 함수 표준화 함수
z2 <- as.data.frame(scale(x)) # matrix -> data.frame
str(z2)
hist(z2)
hist(z2$V1)
summary(iris[-5])
summary(iris)
summary(iris[-5,-4])
summary(iris[:5])
summary(iris[:4])
summary(iris[,4])
summary(iris[-5])
summary(iris[-3,-5])
summary(iris[3,5])
summary(iris[-5])
summary(iris[-4])
summary(iris[-5])
iris_nor <- as.data.frame(scale(iris[-5]))
summary(iris_nor)
nor <- function(x){
return((x-min(x)) / (max(x)-min(x)))
}
iris_nor2 <- apply(iris[-5],2,nor)
summary(iris_nor2)
sample(x,100,replace= FALSE) # 복원 추출
score <- runif(100,min=40,max100)
score <- runif(100,min=40,max=100)
score
df <- data.frame(no,score)
no <- 1: 100
score <- runif(100,min=40,max=100)
score
df <- data.frame(no,score)
nrow(df)
nrow(df)
sample (x = nrow(df),size=15)
idx
idx <- sample (x = nrow(df),size=15)
idx
idx <- sample (x = nrow(df),size=15)
sam <- df[idx,]
sam
idx
# train/test 70% 30% dataset
idx <- sample(x = nrow(df),size=0.7)
idx
# train/test 70% 30% dataset
idx <- sample(x = nrow(df),size= x*0.7)
idx
size(idx)
count(idx)
nrow(idx)
nrow(df[idx,])
train <- df[idx,]
test  <- df[-idx,]
dim(test)
# 05. iris 데이터셋을 대상으로 8:2비율로 sampling하여 train과 test 셋을 만드시오.
iris
# 05. iris 데이터셋을 대상으로 8:2비율로 sampling하여 train과 test 셋을 만드시오.
dim(iris)
train <- sample(x = nrow(iris) , size = 0.8*x)
train
train <- iris[sample(x = nrow(iris) , size = 0.8*x),]
train
dim(train)
idx <- iris[sample(x = nrow(iris) , size = 0.8*x),]
train <- iris[idx,]
dim(train)
test <- iris[train]
test <- iris[-idx,]
dim(test)
idx <- iris[sample(x = nrow(iris) , size = 0.8*x),]
train <- iris[idx,]
idx <- iris[sample(x = nrow(iris) , size = 0.8*x),]
train <- iris[idx,]
dim(train)
test <- iris[-idx,]
dim(test)
idx <- sample(x = nrow(iris) , size = 0.8*x)
train <- iris[idx,]
dim(train)
test <- iris[-idx,]
dim(test)
# 50% vs 50%
idx <- sample(nrow(iris),nrow(iris)*0.5)
train <- iris[idx]
test <- iris[idx]
# 50% vs 50%
idx <- sample(nrow(iris),nrow(iris)*0.5)
train <- iris[idx,]
test <- iris[-idx,]
head(iris)
# speal.length : y (종속변수)
# petal.length : x (독립변수)
# model : x - > y
model <- lm(Sepal.Length ~Petal.Length ,data = train)
pred  <- model$fitted.values
pred
pred  <- model$fitted.values # 예측치치
pred
model <- lm(Sepal.Length ~Petal.Length ,data = test)
model <- lm(Sepal.Length ~Petal.Length ,data = train)
pred  <- model$fitted.values # 예측치 (y 예측)
pred
model2 <- lm(Sepal.Length ~Petal.Length ,data = test)
pred2 <- model2$fitted.values
pred2
train_y <- train$Sepal.Length # 정답
# 정답 vs 예측치
plot(idx,trian_y)
# 정답 vs 예측치
plot(idx,train_y)
# 정답 vs 예측치
plot(train$petal.length,train_y)
# 정답 vs 예측치
plot(train$Petal.length,train_y)
# 정답 vs 예측치
plot(train$Petal.Length,train_y)
plot(train$Petal.Length,pred)
# 정답 vs 예측치
plot(train$Petal.Length,train_y)
# 정답 vs 예측치
plot(train$Petal.Length,train_y , col="bule")
# 정답 vs 예측치
plot(train$Petal.Length,train_y , col="blue")
plot(train$Petal.Length,pred , col="red")
points(train$Petal.Length,pred , col="red")
# 정답 vs 예측치
plot(train$Petal.Length,train_y , col="blue")
points(train$Petal.Length,pred , col="red")
# 범례
legend("topleft" ,legend = c("train","test"))
# 범례
legend("topleft" ,legend = c("train","test") ,col=("blue","red"))
# 범례
legend("topleft" ,legend = c("train","test") ,col=("blue","red"))
# 범례
legend("topleft" ,legend = c("train","test") col =c('red','blue'))
# 범례
legend("topleft" ,legend = c("train","test") ,col =c('red','blue'))
# 범례
legend("topleft" ,legend = c("train","test") ,col =c('red','blue') ,pch=c(18,19))
# train_y
train_y <- train$Pepal.Length # 정답
# train_y
test_y <- test$Pepal.Length # 정답
# 정답 vs 예측치
plot(train$Petal.Length,train_y , col="blue")
points(train$Petal.Length,pred , col="red")
# 범례
legend("topleft" ,legend = c("train","test") ,col =c('red','blue') ,pch=c(18,19))
S
S
# train_y
train_y <- train$Sepal.Length # 정답
# train_y
test_y <- test$Sepal.Length # 정답
# 정답 vs 예측치
plot(train$Petal.Length,train_y , col="blue")
points(train$Petal.Length,pred , col="red")
# 범례
legend("topleft" ,legend = c("train","test") ,col =c('red','blue') ,pch=c(18,19))
# 범례
legend("topleft" ,legend = c("예측","실제제") ,col =c('red','blue') ,pch=c(18,19))
# 범례
legend("topleft" ,legend = c("예측","실제") ,col =c('red','blue') ,pch=c(18,19))
pred2 <- model$test$Petal.Length
pred2
predict(model, newdata=test$Pepal.Length, interval="confidence")
setwd()
setwd("c:/Rwork/data")
data <- read.csv("cleanDescriptive.csv")
str(data)
# 변수 선택
x <- data$level2 # 학력수준
y <- data$pass2 # 합격 유무
table(x)
table(y)
# 1) 교차분할표
table(x, y) # (행 , 열)
################################
# 1. 교차분석
################################
# - 범주형(명목척도, 서열척도)
df <-data.frame(Level = x , Pass = y)
df
################################
# 1. 교차분석
################################
# - 범주형(명목척도, 서열척도)
df <-data.frame(Level = x , Pass = c(1,2))
df
# 1) 교차분할표
table(df$Level, df$Pass) # (행 , 열)
################################
# 1. 교차분석
################################
# - 범주형(명목척도, 서열척도)
df <-data.frame(Level = x , Pass = y)
df
# 1) 교차분할표
table(df$Level, df$Pass) # (행 , 열)
# 2) package 이용
install.packages("gmodels")
library(gmodels)
library(help="gmodels")
CrossTable(x=x , y=y)
# 기대비율(고졸 vs 합격 = 0.363)
# 1) 기대값 =  (셀의행합 * 셀의열합) /전체합
p_value =  89 * 135 / 225
p_value
# 기대비율(고졸 vs 합격 = 0.363)
# 1) 기대값 =  (셀의행합 * 셀의열합) /전체합
p_value =  89 * 135 / 225
p_value # 53.4
# 2) 기대비율 = (관측값 - 기댓값)^2 / 기댓값
p_rate = (49-p_value)^2 / p_value
p_rate
# 귀무가설 : 부모의 학력 수준이 자녀의 대학진학에 영항을 미치지않는다.
CrossTable(x=df$Level,y=df$Pass,chisq = TRUE)
chisq.test(c(4,6,17,16,8,9))
data <- textConnection(
"스포츠음료종류  관측도수
1   41
2   30
3   51
4   71
5   61
")
data
x <- read.table(data, header=T)
setwd("c:/Rwork/data")
data <- read.csv("cleanDescriptive.csv")
# 독립변수(x)와 종속변수(y) 생성
x <- data$level2 # 부모의 학력수준
y <- data$pass2 # 자녀의 대학진학여부
CrossTable(x, y, chisq = TRUE) #p =  0.2507057
#<단계 1> 파일 가져오기
setwd("c:/Rwork/data")
smoke <- read.csv("smoke.csv", header=TRUE)
# 변수 보기
head(smoke) # education, smoking 변수
# 변수 보기
head(smoke) # education, smoking 변수
# education 변수 리코딩
table(smoke$education, smoke$smoking)
smoke$education2[smoke$education==1] <- "1.대졸"
smoke$education2[smoke$education==2] <- "2.고줄"
smoke$education2[smoke$education==3] <- "3.중졸"
# smoking 변수 리코딩
smoke$smoking2[smoke$smoking==1] <- "1.과대흡연"
smoke$smoking2[smoke$smoking==2] <- "2.보통흡연"
smoke$smoking2[smoke$smoking==3] <- "3.비흡연"
smoke # 가독성을 위한 변수값 변경 결과
#<단계 3> 교차분할표 작성
CrossTable(smoke$education2 , smoke$education , chisq = TRUE)
#<단계 3> 교차분할표 작성
CrossTable(smoke$education2 , smoke$smoking2 , chisq = TRUE)
#<단계 3> 교차분할표 작성
CrossTable(smoke$education , smoke$smoking, chisq = TRUE)
2
#<단계 3> 교차분할표 작성
CrossTable(smoke$education2 , smoke$smoking2 , chisq = TRUE)
#<단계 3> 교차분할표 작성
table(smoke$education2 , smoke$smoking2)
#[단계 3] 산점도를 이용한 변수간의 관련성 보기 - plot(x,y) 함수 이용
plot(x,y)
#[단계 1] 파일 가져오기
data <- read.csv("cleanData.csv")
head(data)
#[단계 2] 변수 선택
x <- data$position # 행 - 직위 변수 이용
y <- data$age3 # 열 - 나이 리코딩 변수 이용
#[단계 3] 산점도를 이용한 변수간의 관련성 보기 - plot(x,y) 함수 이용
plot(x,y)
#[단계 4] 독립성 검정
CrossTable(x, y , chisq = TRUE)
data <- subset(data, !is.na(survey), c(method, survey))
# 1. 파일 가져오기
setwd("C:/SUNMOON/Rwork-I/Part-III")
data <- read.csv("homogenity.csv", header=TRUE)
head(data)
# method와 survery 변수만 서브셋 생성
data <- subset(data, !is.na(survey), c(method, survey))
# 교육방법2 필드 추가
data$method2[data$method==1] <- "방법1"
data
table(data$method)
# 교육방법2 필드 추가
data$method2[data$method==1] <- "방법1"
data$method2[data$method==2] <- "방법2"
data$method2[data$method==3] <- "방법3"
# 만족도2 필드 추가
data$survey2[data$survey==1] <- "매우만족"
data$survey2[data$survey==2] <- "만족"
data$survey2[data$survey==3] <- "보통"
data$survey2[data$survey==4] <- "불만족"
data$survey2[data$survey==5] <- "매우불만족"
# 3. 교차분할표 작성
table(data$method2, data$survey2)  # 교차표 생성 -> table(행,열)
# 4. 동질성 검정 - 모수 특성치에 대한 추론검정
chisq.test(data$method2, data$survey2)
# 4. 동질성 검정 - 모수 특성치에 대한 추론검정
chisq.test(data$method2, data$survey2)
chisq.test(iris$Species,iris$Sepal.Length)
### iris
str(iris)
# x,y변수 선택
x <- iris$Species
y <- iris$Sepal.Length
chisq.test(iris$Species,iris$Sepal.Length)
chisq.test(x ,y)
install.packages("dplyr")
library(dplyr)
# dataset %>% function()
iris %>% group_by(Species) %>% summarise()
# dataset %>% function()
iris %>% group_by(Species) %>% summarise(avg = mean(Sepal.Length))
#[단계 1] 파일 가져오기
response <- read.csv("response.csv")
head(response) # 변수 보기
# [단계 2] 코딩 변경
# job 칼럼 코딩 변경 : 1:학생, 2:직장인, 3:주부
# response 칼럼 코딩 변경 : 1:무응답, 2:낮음, 3:높음
response
head(response) # 변수 보기
# [단계 2] 코딩 변경
# job 칼럼 코딩 변경 : 1:학생, 2:직장인, 3:주부
# response 칼럼 코딩 변경 : 1:무응답, 2:낮음, 3:높음
response$job2[response$job == 1] <- '학생'
response$job2[response$job == 2] <- '직장인'
response$job2[response$job == 3] <- '주부'
response$response2[response$response == 1] <- '무응답'
response$response2[response$response == 2] <- '낮음'
response$response2[response$response == 3] <- '높음'
# [단계 3] 교차분할표 작성
table(response$job2,response$response2)
# [단계 4] 동질성 검정
chisq.test(response$job2,response$response2)
