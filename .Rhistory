hist(fgender)
gender <- c("m","f","m","f","m")
mode(gender)
fgender <- as.factor(gender)
# [1] m f m f
# Levels: f m //영문자 순으로 f부터터
fgender[2]
str(fgender)
# Factor w/ 2 levels "f","m": 2 1 2 1 2
plot(fgender)
#mean(nu) 오류
mean(as.numeric(false))
#mean(nu) 오류
mean(as.numeric(FALSE))
nu
#mean(nu) 오류
mean(as.numeric(nu))
basic <- c("m","f","m","f","m")
x <- c("m","f")
fgender2 <- factor(gender,levels = x)
str(fgender)
class(fgender)
# mode()자료형 반환  /  class() 자료구조 반환
mode(fgender)
class(a <- c(1,2))
class(a <- c(1,2))
class(nu)
a <- c(1,2,3)
class(a)
# factor 고려사항
num <- c(4,2,2,4)
fnum <- as.factor(num)
fnum
str(fnum)
# 요인형 -> 숫자형
num <- as.numeric()
# 요인형 -> 숫자형
num <- as.numeric(fnum)
num
# mode()자료형 반환  /  class() 자료구조 반환
mode(fgender)  # numeric
class(fgender) # factor
a <- c(1,2,3)
class(a)
# factor 고려사항  // 숫자형 - > 요인형
num <- c(4,2,2,4)
fnum <- as.factor(num)
str(fnum)
# 요인형 -> 숫자형
num2 <- as.numeric(fnum) # 요인형이 숫자로 반환됨
num2
# 요인형  -> 문자형 -> 숫자형
as.character(fnum)
# 요인형  -> 문자형 -> 숫자형
num3 <-as.numeric(as.character(fnum))
num3
median(10,30,40)
#-----------------------------------------------------
# 5. 기본함수
mean(c(10,20,30)) # 평균
help(mean)
#-----------------------------------------------------
# 5. 기본함수
mean(c(10,20,30,NA)) # 평균
#-----------------------------------------------------
# 5. 기본함수
mean(c(10,20,30,NA)) # 평균
#-----------------------------------------------------
# 5. 기본함수
mean(c(10,20,30,NULL)) # 평균
#-----------------------------------------------------
# 5. 기본함수
mean(c(10,20,30,NA) , na.rm =TRUE) # 평균
?mean
# 2)작업공간
getwd()
setwd()
setwd(] "C:/Rwork")
setwd("C:/Rwork")
setwd("C:/Rwork/data")
getwd()
test <-read.csv("test.csv")
str(test)
#01. 현재 작업 공간을 확인하고 "D:/Rwork/"로 변경하시오.
getwd()
setwd("D:/Rwork/")
setwd("C:/Rwork/")
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name;age;address)
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name,age,address)
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name)
mode(age)
mode(address)
<
age <- 26
address <- '서울'
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name;age;address
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name)
mode(age)
mode(address)
#03. 다음 rain 변수는 비 유무를 나타내는 변수이다. 이 변수를 요인형으로 변경하시오.
rain <- c('YES', 'No', 'YES', 'YES', 'NO')
frain <- as.factor(rain)
#04. R에서 제공하는 women 데이터 셋을 다음과 같이 처리하시오.
data()
#04. R에서 제공하는 women 데이터 셋을 다음과 같이 처리하시오.
data(women)
women
#조건2) women 데이터 셋의 자료형은 무엇인가?
mode(women)
#조건3) plot() 함수를 이용하여 기본 차트 그리기
plot(women)
#조건1) 1~10까지 벡터를 생성한다.
test <- c(1:10)
test
#조건2) 생성된 벡터를 대상으로 평균을 구한다.
mean(test)
str(frain)
str(women)
#조건2) women 데이터 셋의 자료형은 무엇인가?
mode(women['height'])
#조건2) women 데이터 셋의 자료형은 무엇인가?
mode(women.height)
#조건2) women 데이터 셋의 자료형은 무엇인가?
mode(women)
women[0]
women[1]
women[2]
mode(women[1])
str(women[1])
mode(women[1]['height'])
str(women[1]['height'])
str(women[1][0])
str(women[1][1])
women[1][1]
women[2][1]
women[2][3]
women[2][1]
test[0]
test[1]
mode(test)
str(test)
str(women[1][1]['height'])
str(women[1,2])
str(women[1,1])
str(women)
first <- list(1,2,3)
second <- list('one','two')
ab <- data.frame(first,second)
ab
mode(ab)
str(ab)
c(a='a',b='b',c='c')
str(c(a='a',b='b',c='c'))
k -> c(a='a',b='b',c='c')
k <- c(a='a',b='b',c='c')
k[a]
k[0]
k[1]
k[1,1]
k[1]
shell('cls')
# c()함수
x <- c(1:5)
x
y <- c(1,3,5)
seq(1,9,by=2)
# rep()
rep(1,3)
# rep()
rep(1,3,each=3) #(var , num)
# rep()
rep(1:3,each=3) #(var , num)
a <-(1:100)
a <-c(1:100)
a
length(a)
length(a[50:60])
a[length(a)-5:]
a[length(a)-5:]
a[length(a)-5]
a[length(a)-5:]
a[length(a)-5:length(a)]
a[1:]
a[length(a)-5:length(a)]
a[a>10 & a<40]
matrix(c(1:9),nrow = 3)
dim(m1)
m1 = matrix(c(1:9),nrow = 3)
dim(m1)
dim(c(1:9))
dim(m1)
rbind(x1,x2)
x1 <- c(1:5)
x2 <- 5:1
rbind(x1,x2)
cbind(x1,x2)
dim(cbind(x1,x2))
cbind(x1,x2)
m1
m1[,1]
mq[1,]
m1[1,]
source('C:/Rwork/script/chap02_datastructure.R', encoding = 'UTF-8', echo=TRUE)
m1 = matrix(c(1:27),nrow = 3)
m1[c(2:3),4:5]
m1[c(2:3),4:10]
m1[c(2:3),4:7]
x <- matirx(1:9,nrow =3 , ncol =3 ,byrow =True)
x <- matirx(1:9,nrow =3 , ncol =3 ,byrow =True)
x <- matrix(1:9,nrow =3 , ncol =3 ,byrow =True)
x <- matrix(1:9,nrow =3 , ncol =3 ,byrow =TRUE)
x
colnames(x) <- c("one","two","three")
x
# broadcast 연산
x <- 1:10
x * 0.5
# vector vs matrix
x <- 1:3
y <- matrix(1:6,nrow=2)
dim(y)
y
y*x
x*y
y <- matrix(req(1:6),nrow=2)
y <- matrix(req(1,6),nrow=2)
y <- matrix(re(1,6),nrow=2)
y <- matrix(rep(1,6),nrow=2)
dim(y)
x*y
y <- matrix(rep(1,6),nrow=2,byrow=FALSE)
dim(y)
x*y
Y
y
m1 = matrix(c(1:25),nrow = 3)
m1 = matrix(c(1:31),nrow = 3)
dim(m1)
m1
# apply() : 처리
apply(m1,sum)
# apply() : 처리
apply(m1,1,sum)
z <- x*y
# apply() : 처리
apply(z,1,sum)
z
# apply() : 처리
apply(z,0,sum)
# apply() : 처리
apply(z,2,sum)
apply(z,2,mean)
arr <- array(1:12,c(3,2,2))
arr
arr[,,1]
no <- 1:3
name <- c("a","b","c")
age <- c(35,45,20)
pay <- c(200,300,150)
as.data.frame(no,name,age,pay)
data.frame(no,name,age,pay)
df <- data.frame(no,name,age,pay)
df[name]
df['name']
epay <- df$no
epay
mode(epay)
str(epay)
class(epay)
str(epay)
str(df['name'])
df <- data.frame(No=no,Name=name,Age=age,Pay=pay)
str(df['name'])
str(df['Name'])
epay <- df$No
str(epay)
# 산포도 : 분산과 표준편차
var(epay)
sd(epay)
sqrt(var((epay)))
sd(epay)
epay <- df$Pay
str(epay)
# 산포도 : 분산과 표준편차
var(epay)
sqrt(var((epay)))
sd(epay)
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
1:5
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
Vec1 <- 1:5
Vec1
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
Vec2 <- c(1:10,3)
Vec2
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
Vec2 <- seq(1:10,by=3)
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
Vec2 <- seq(1,10,by=3)
Vec2
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
Vec3 <- req("R",5)
Vec3
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
Vec3 <- req("R",5)
Vec3
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
Vec3 <- rep("R",5)
Vec3
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
Vec4 <- c(Vec1,Vec2,Vec3)
Vec4
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(25,-15,5)
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(25,-15,by=5)
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(25,-15,by=-5)
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[Vec4//2=0]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[Vec4%2=0]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[Vec4/2=0]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[Vec4 %% 2=0]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[!(Vec4 %% 2)]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec5 <- Vec4[Vec4 %% 2]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4 %% 2
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4 / 2
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4[:,2]
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
Vec4[:]
# 단계1> 행 단위로 묶어서 matrix 생성하기
rbind(v1,v2)
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
v2 <- c(40,50,-30,7,10)
# 단계1> 행 단위로 묶어서 matrix 생성하기
rbind(v1,v2)
# 단계1> 행 단위로 묶어서 matrix 생성하기
mt <- rbind(v1,v2)
# 단계2> matrix 차원 보기
dim
# 단계2> matrix 차원 보기
dim(mt)
# 단계3> matrix 열 단위 합계 계산하기
apply(mt,2,sum)
name <-c("최민수","유관순", "이순신","김유신","홍길동")
age <-c(55,45,45,53,15) #연령
gender <-c(1,2,1,1,1) #1:남자, 2: 여자
job <-c("연예인","주부","군인","직장인","학생")
sat <-c(3,4,2,5,5) # 만족도
grade <- c("C","C","A","D","A")
total <-c(44.4,28.5,43.5,NA,27.1) #총구매금액(NA:결측치)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
data.frame(name,age,gender,job,sat,grade,total)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(name,age,gender,job,sat,grade,total)
user
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(user$total)
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
user$total
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
user$sat
plor(user$sat)
plot(user$sat)
kor <- c(90,85,90)
eng <- c(70,85,75)
mat <- c(86,92,88)
# 조건1) 3개의 과목점수를 이용하여 데이터프레임(Data)을 생성한다.
gd <-data.frame(kor,eng,mat)
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
apply(gd , 1, max)
apply(gd , 2, max)
apply(gd , 1)
apply(gd , 1 , var)
apply(gd , 1 , sd)
apply(gd , 1 , mean)
apply(gd , 1 , mean)
round(apply(gd , 2 , mean),2)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
round(apply(gd , 1 , mean),2)
apply(gd , 1, max)
gd
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
apply(gd , 1, max)
apply(gd , 2, max)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
round(apply(gd , 1 , mean),2)
round(apply(gd , 2 , mean),2)
Vec4 <- c(Vec1,Vec2)
Vec5 <- Vec4[Vec4 %% 2]
Vec5
Vec5 <- Vec4[seq(1,length(Vec4),2)]
Vec5
score <- c(90,85,93)
var(score)
diff <- (socre - avg)
avg <- mean(score)
diff <- (socre - avg)
diff <- (score - avg)
diff
diff <- (score - avg)^2
diff
sum(diff)/(length(score)-1)
lst1
# list 서로다른 자료형과 자료구조를 갖는 자료구조(1,2,3)이다
# key value 구조
lst1<- list('lee',"이순신",34)
lst1
# [[1]] -> key
# [1] lee->value
lst[1]
# [[1]] -> key
# [1] lee->value
lst1[1]
# [[1]] -> key
# [1] lee->value
lst1[[1]]
lst2<- list(a:'lee',"이순신",34)
lst2<- list('a'='lee',"이순신",34)
lst2
lst2$a
lst2<- list('a'='lee',"이순신",34,'a'="kim")
lst2
lst2$a
lst2$a
lst2
lst2<- list('a'=c(1,2,3),"이순신",34)
lst2
lst2$a
lst2$a[1]
# [[1]] -> key
# [1] lee->value
lst1[[[1]]]
# [[1]] -> key
# [1] lee->value
lst1[[1]]
lst1[1]
lst1[1][1]    # index를 가지고 key value
lst1[1][2]    # index를 가지고 key value
lst1[1]    # index를 가지고 key value
# [[1]] -> key
# [1] lee->value
lst1[[1]]  # key를 가지고 접근
lst1[1][1][1]   # index를 가지고 key value
lst1[1][1][2]   # index를 가지고 key value
lst1[1][1]  # index를 가지고 key value
lst1[1]  # index를 가지고 key value
lst1[1,1]  # index를 가지고 key value
lst1[1]  # index를 가지고 key value
install.packages(("stringr"))
library(stringr)
names <- str_extract_all(str,"[가-힣]{1}")
names
str <- "김 12 이 13 디 14"
names <- str_extract_all(str,"[가-힣]{1}")
names
names[1]
names
class(names)
names[[1]]
names[[1]][2]
names[[1]][1]
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c('12,13'))
member
data.frame(member)
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c('12','13'))
member
data.frame(member)
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c(12,13))
member
data.frame(member)
typeof(a)
mode(a)
clas(a)
class(a)
member['name']
member[name]
member$name
member$name[0]
member$name[1]
names$[1]
names$[[1]]
a$name
# 2) key = value
member = list(name= c("홍길동","이순신"), age =c(12,13))
member$name[1]
a = data.frame(member)
class(a)
a$name
a = data.frame(member)
a
a$name
a$age
